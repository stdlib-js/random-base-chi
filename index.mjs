// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-number@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-chisquare@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-sqrt@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";var g=e,j=t,f=n,c=s.isPrimitive,b=r,v=i,x=o,y=d,w=m,L=a,N=l.factory,E=p,O=u,P=h;var T=function(){var e,t,n,s,r;if(0===arguments.length)e=N();else if(1===arguments.length&&b(arguments[0]))if(x(n=arguments[0],"prng")){if(!v(n.prng))throw new TypeError(P("invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.",n.prng));e=N({prng:n.prng})}else e=N(n);else{if(!c(r=arguments[0]))throw new TypeError("invalid argument. First argument must be a positive number. Value: `"+r+"`.");if(arguments.length>1){if(!b(n=arguments[1]))throw new TypeError(P("invalid argument. Options argument must be an object. Value: `%s`.",n));if(x(n,"prng")){if(!v(n.prng))throw new TypeError(P("invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.",n.prng));e=N(r,{prng:n.prng})}else e=N(r,n)}else e=N(r)}return s=void 0===r?h:u,t=e.PRNG,g(s,"NAME","chi"),n&&n.prng?(g(s,"seed",null),g(s,"seedLength",null),f(s,"state",y(null),w),g(s,"stateLength",null),g(s,"byteLength",null),g(s,"toJSON",y(null))):(j(s,"seed",i),j(s,"seedLength",o),f(s,"state",a,l),j(s,"stateLength",d),j(s,"byteLength",m),g(s,"toJSON",p)),g(s,"PRNG",t),s;function i(){return t.seed}function o(){return t.seedLength}function d(){return t.stateLength}function m(){return t.byteLength}function a(){return t.state}function l(e){t.state=e}function p(){var e={type:"PRNG"};return e.name=s.NAME,e.state=E(t.state),e.params=void 0===r?[]:[r],e}function u(){return O(e())}function h(t){return L(t)||t<=0?NaN:O(e(t))}},G=T(),R=T;e(G,"factory",R);var q=G;export{q as default,R as factory};
//# sourceMappingURL=index.mjs.map
